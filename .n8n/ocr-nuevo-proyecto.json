{
  "nodes": [
    {
      "parameters": {
        "url": "=https://api.mistral.ai/v1/files/{{ $json.id }}/url",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mistralCloudApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "expiry",
              "value": "24"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2384,
        144
      ],
      "id": "147d670c-8502-4782-845f-b07ba9c97738",
      "name": "HTTP Request1",
      "credentials": {
        "mistralCloudApi": {
          "id": "PSmKQQtzOTwdxGCi",
          "name": "Mistral Cloud account varac"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.mistral.ai/v1/ocr",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mistralCloudApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"mistral-ocr-latest\",\n  \"document\": {\n    \"type\": \"document_url\",\n    \"document_url\": \"{{ $json.url }}\"\n  },\n  \"include_image_base64\": false\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2608,
        144
      ],
      "id": "df9e061a-be6b-4c85-8c42-1b5f8a203cbc",
      "name": "HTTP Request2",
      "credentials": {
        "mistralCloudApi": {
          "id": "PSmKQQtzOTwdxGCi",
          "name": "Mistral Cloud account varac"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.mistral.ai/v1/files",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mistralCloudApi",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "purpose",
              "value": "ocr"
            },
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data-posterior"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2160,
        144
      ],
      "id": "76c122b0-2eeb-4f04-85f3-166654dfd653",
      "name": "Posterior",
      "credentials": {
        "mistralCloudApi": {
          "id": "PSmKQQtzOTwdxGCi",
          "name": "Mistral Cloud account varac"
        }
      }
    },
    {
      "parameters": {
        "text": "={\n  \"prompt\": {\n    \"role\": \"Extractor de Datos\",\n    \"description\": \"Extrae los datos de consumo mensual en kWh desde una tabla de texto plano como la que aparece en una factura CFE. Busca tablas con columnas de período, demanda kW, consumo kWh, factor potencia, etc.\",\n    \"input_data\": \"{{ $json.pages[0].markdown }}\",\n    \"rules\": [\n      {\n        \"rule\": \"Busca tablas que contengan columnas como 'Periodo', 'Consumo total kWh', 'Demanda kW', etc.\"\n      },\n      {\n        \"rule\": \"Extrae SOLO el período (mes y año) y el consumo en kWh de cada fila.\"\n      },\n      {\n        \"rule\": \"El período debe estar en formato MES + año de 2 dígitos (ej: JUN24, FEB25, DIC24).\"\n      },\n      {\n        \"rule\": \"Si el mes aparece como 3 letras (JUN, FEB, DIC), manténlo así. Si aparece completo, abrevia a 3 letras en español.\"\n      },\n      {\n        \"rule\": \"El consumo debe ser solo el número entero de kWh, sin comas ni símbolos.\"\n      },\n      {\n        \"rule\": \"Si hay filas duplicadas del mismo mes con diferentes consumos, mantén ambas por separado.\"\n      },\n      {\n        \"rule\": \"Ignora encabezados, totales, promedios y cualquier dato que no sea un período específico.\"\n      },\n      {\n        \"rule\": \"Si el consumo contiene comas (ej: 42,842), elimina las comas (42842).\"\n      },\n      {\n        \"rule\": \"Ordena los datos cronológicamente del más antiguo al más reciente.\"\n      },\n      {\n        \"rule\": \"NO inventes valores. Usa SOLO los que están claramente indicados en la tabla.\"\n      },\n      {\n        \"rule\": \"El resultado debe ser ÚNICAMENTE JSON válido, sin texto adicional, explicaciones ni comentarios.\"\n      }\n\n    ],\n    \"output_example\": {\n      \"consumo_historico\": [\n        {\"periodo\": \"JUN24\", \"kwh\": 42842},\n        {\"periodo\": \"JUL24\", \"kwh\": 56355},\n        {\"periodo\": \"AGO24\", \"kwh\": 60341}\n      ],\n      \"consumo_max\": 62988\n    },\n    \"response_format\": \"JSON\"\n  }\n}",
        "schemaType": "fromJson",
        "jsonSchemaExample": "{\n  \"consumo_historico\": [{\n    \"periodo\": \"\",\n    \"kwh\": 0\n  }],\n  \"consumo_max\": 0\n}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.informationExtractor",
      "typeVersion": 1.2,
      "position": [
        2816,
        144
      ],
      "id": "78c9d4d6-5a4c-40e0-b020-16b8ccd26770",
      "name": "datos_recibo_posterior_cfe"
    },
    {
      "parameters": {
        "functionCode": "// OPCIÓN 1: Hash simple sin crypto (RECOMENDADA)\n// Ahora accedemos correctamente a los datos del nodo anterior 'Set'\nconst lat = $json.latitude || 0;\nconst lng = $json.longitude || 0;\nconst radioKm = 5;\n\n// Verificar que tenemos coordenadas válidas\nif (!lat || !lng) {\n  throw new Error('No se encontraron coordenadas válidas. Latitude: ' + lat + ', Longitude: ' + lng);\n}\n\n// Crear grid redondeado para optimizar caché\nconst latGrid = Math.round(lat * 100) / 100;\nconst lngGrid = Math.round(lng * 100) / 100;\n\n// Hash simple pero efectivo\nfunction createLocationHash(lat, lng) {\n  const str = `${lat},${lng}`;\n  let hash = 0;\n  \n  for (let i = 0; i < str.length; i++) {\n    const char = str.charCodeAt(i);\n    hash = ((hash << 5) - hash) + char;\n    hash = hash & hash;\n  }\n  \n  return Math.abs(hash).toString(36);\n}\n\nconst hashUbicacion = createLocationHash(latGrid, lngGrid);\n\nreturn [{\n  json: {\n    latitude: lat,\n    longitude: lng,\n    lat_grid: latGrid,\n    lng_grid: lngGrid,\n    radio_km: radioKm,\n    hash_ubicacion: hashUbicacion\n  }\n}];"
      },
      "name": "Generate Cache Key",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1504,
        -176
      ],
      "id": "99be281b-c1b0-42b6-983c-509f7cba52e6"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  id,\n  datos_nasa_mensuales,\n  irradiacion_promedio_min,\n  irradiacion_promedio_max,\n  irradiacion_promedio_anual,\n  fecha_obtencion,\n  vigente_hasta,\n  hash_ubicacion\nFROM irradiacion_cache \nWHERE hash_ubicacion = '{{ $json.hash_ubicacion }}'\nORDER BY created_at DESC \nLIMIT 1;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        1728,
        -176
      ],
      "id": "fb007ad0-42cb-498f-9b99-b89387c15e09",
      "name": "Query Cache",
      "alwaysOutputData": true,
      "executeOnce": false,
      "credentials": {
        "postgres": {
          "id": "jjHxTq8OTwLBl895",
          "name": "Postgres account supabase enerbook"
        }
      },
      "notes": "0"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "leftValue": "={{ $json.hash_ubicacion }}",
              "rightValue": 0,
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              },
              "id": "5cf8b301-7de2-44da-a225-ff4e5e70b422"
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1936,
        -176
      ],
      "id": "26a419f7-9c86-41c8-8297-230236fb9248",
      "name": "Cache Exists?"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- INSERT COMPLETO - Todos los campos integrados\nINSERT INTO irradiacion_cache (\n  lat_grid,\n  lng_grid,\n  radio_km,\n  datos_nasa_mensuales,\n  irradiacion_promedio_min,\n  irradiacion_promedio_max,\n  irradiacion_promedio_anual,\n  fecha_obtencion,\n  vigente_hasta,\n  hash_ubicacion,\n  region_nombre\n) VALUES (\n  {{ $node[\"Generate Cache Key\"].json.lat_grid }},\n  {{ $node[\"Generate Cache Key\"].json.lng_grid }},\n  {{ $node[\"Generate Cache Key\"].json.radio_km }},\n  '{{ JSON.stringify($node[\"Calculate Annual Irradiation1\"].json.datos_nasa_mensuales) }}'::jsonb,\n  {{ $node[\"Calculate Annual Irradiation1\"].json.irradiacion_promedio_min }},\n  {{ $node[\"Calculate Annual Irradiation1\"].json.irradiacion_promedio_max }},\n  {{ $node[\"Calculate Annual Irradiation1\"].json.irradiacion_promedio_anual }},\n  NOW(),\n  NOW() + INTERVAL '6 months',\n  '{{ $node[\"Generate Cache Key\"].json.hash_ubicacion }}',\n  \n    '{{ \n    $node[\"Dirección a Pin1\"].json.results[0].address_components\n      .filter(component => component.types.includes(\"administrative_area_level_1\"))[0]\n      ?.long_name || \"Estado no encontrado\"\n  }}'\n)\nRETURNING id, hash_ubicacion;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        2640,
        -144
      ],
      "id": "561ad77a-6061-461e-8f58-6e7689635e0f",
      "name": "Save to Cache",
      "credentials": {
        "postgres": {
          "id": "jjHxTq8OTwLBl895",
          "name": "Postgres account supabase enerbook"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Fusionar los datos de irradiación con la información de caché guardado\nconst irradiacionData = $node[\"Calculate Annual Irradiation1\"].json;\nconst cacheInfo = $json[0] || {};\n\n// Obtener user_id desde el nodo Code1 donde se genera originalmente\nlet userId = 'unknown';\nlet projectTitle = 'Proyecto Solar';\nlet projectDescription = '';\n\ntry {\n  // Acceder directamente al nodo Code1 que genera el user_id\n  const code1Items = $node[\"Code1\"].json;\n  if (Array.isArray(code1Items) && code1Items.length > 0) {\n    userId = code1Items[0]?.user_id || 'unknown';\n    projectTitle = code1Items[0]?.project_title || 'Proyecto Solar';\n    projectDescription = code1Items[0]?.project_description || '';\n  } else if (code1Items && typeof code1Items === 'object') {\n    userId = code1Items.user_id || 'unknown';\n    projectTitle = code1Items.project_title || 'Proyecto Solar';\n    projectDescription = code1Items.project_description || '';\n  }\n} catch (error) {\n  console.error('Error getting user_id from Code1:', error);\n  userId = 'unknown';\n}\n\nconsole.log('Merge Cache Info - userId:', userId);\nconsole.log('Merge Cache Info - projectTitle:', projectTitle);\n\nreturn [{\n  json: {\n    ...irradiacionData,\n    cache_saved: true,\n    cache_id: cacheInfo.id,\n    hash_ubicacion: cacheInfo.hash_ubicacion,\n    user_id: userId,\n    project_title: projectTitle,\n    project_description: projectDescription\n  }\n}];"
      },
      "name": "Merge Cache Info",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2896,
        -64
      ],
      "id": "3d05215d-4cdc-452c-8a45-f550c603981f"
    },
    {
      "parameters": {
        "url": "=https://api.mistral.ai/v1/files/{{ $json.id }}/url",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mistralCloudApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "expiry",
              "value": "24"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        240,
        -176
      ],
      "id": "7747bd9b-bd1e-40a1-9806-00ecf823d6d1",
      "name": "HTTP Request",
      "credentials": {
        "mistralCloudApi": {
          "id": "PSmKQQtzOTwdxGCi",
          "name": "Mistral Cloud account varac"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.mistral.ai/v1/ocr",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mistralCloudApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"mistral-ocr-latest\",\n  \"document\": {\n    \"type\": \"document_url\",\n    \"document_url\": \"{{ $json.url }}\"\n  },\n  \"include_image_base64\": false\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        464,
        -176
      ],
      "id": "fc52a0cc-ad85-4b13-827e-84749f380c8d",
      "name": "HTTP Request6",
      "credentials": {
        "mistralCloudApi": {
          "id": "PSmKQQtzOTwdxGCi",
          "name": "Mistral Cloud account varac"
        }
      }
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "number": [
            {
              "name": "latitude",
              "value": "={{ $node[\"Dirección a Pin1\"].json[\"results\"][0][\"geometry\"][\"location\"][\"lat\"] }}"
            },
            {
              "name": "longitude",
              "value": "={{ $node[\"Dirección a Pin1\"].json[\"results\"][0][\"geometry\"][\"location\"][\"lng\"] }}"
            }
          ],
          "string": [
            {
              "name": "place_id",
              "value": "={{ $node[\"Dirección a Pin1\"].json[\"results\"][0][\"place_id\"] }}"
            }
          ]
        },
        "options": {}
      },
      "name": "Set",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        1280,
        -176
      ],
      "id": "2b05c266-e8c7-4dc4-8dc6-b963bc5481be"
    },
    {
      "parameters": {
        "text": "=Extrae los datos del recibo CFE del siguiente texto y devuelve ÚNICAMENTE un JSON válido sin explicaciones adicionales.\nREGLAS DE EXTRACCIÓN:\n- no_servicio: busca \"NO. DE SERVICIO:\" y extrae el número\n- RMU: busca \"RMU:\" y extrae el número  \n- cuenta: busca \"CFE CUENTA:\" y extrae el código\n- tarifa: busca \"TARIFA:\" y extrae el código (ej: GDMTH)\n- no_medidor: busca \"NO. MEDIDOR:\" y extrae el código\n- multiplicador: busca \"MULTIPLICADOR:\" y extrae el número\n- no_hilos: busca \"NO HILOS:\" y extrae el número\n- nombre: nombre del cliente (aparece después de los datos de CFE)\n- direccion: dirección completa del cliente tal como aparece en el recibo\n- direccion_formatted: reformatea la dirección para Google Places API siguiendo estas reglas generales para México:\n  * Convierte a formato título (primera letra mayúscula)\n  * Elimina referencias técnicas: NAVE, BODEGA, LOCAL, DEPTO, OFICINA, PISO, INTERIOR + números\n  * Estandariza: AV/AVE → Av., CALLE → Calle, BLVD → Blvd., COL → Col., FRACC → Fracc.\n  * Convierte abreviaciones de estados a nombres completos + \", México\"\n  * Estructura limpia: \"Calle Número, Colonia, CP Ciudad, Estado, México\"\n- periodo_inicio: fecha inicio del período, convierte formato \"31 MAY 25\" a \"2025-05-31\"\n- periodo_fin: fecha fin del período, convierte formato \"30 JUN 25\" a \"2025-06-30\"\n- kwh_total: suma todos los consumos kWh (base + intermedia + otros)\n- total_pagar_mxn: extrae solo el número del monto total a pagar\n\nTEXTO DEL RECIBO:\n{{ $json.pages[0].markdown }}\n\n",
        "schemaType": "fromJson",
        "jsonSchemaExample": "{\n  \"no_servicio\": \"\",\n  \"RMU\": \"\",\n  \"cuenta\": \"\",\n  \"tarifa\": \"\",\n  \"no_medidor\": \"\",\n  \"multiplicador\": \"\",\n  \"no_hilos\": \"\",\n  \"nombre\": \"\",\n  \"direccion\": \"\",\n  \"periodo_inicio\": \"YYYY-MM-DD\",\n  \"periodo_fin\": \"YYYY-MM-DD\",\n  \"kwh_total\": \"\",\n  \"total_pagar_mxn\": \"\"\n}",
        "options": {
          "systemPromptTemplate": "Eres un extractor de datos especializado en recibos CFE. Devuelves solo JSON válido."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.informationExtractor",
      "typeVersion": 1.2,
      "position": [
        688,
        -176
      ],
      "id": "25d8926b-77c0-4a6d-9ece-cd85ed0079fe",
      "name": "datos_recibo_frontal_cfe1"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ \n  {\n    \"success\": true,\n    \"project_id\": $node[\"Create Project\"].json.id || \"unknown\",\n    \"message\": \"Proyecto creado exitosamente\",\n    \"redirect_url\": \"/dashboard?tab=proyectos\",\n    \"data\": {\n      \"consumo_max\": $json.output?.consumo_max || null,\n      \"sistema_requerido\": $json.sizing?.results?.kWp_needed || null,\n      \"paneles\": $json.sizing?.results?.n_panels || null,\n      \"produccion_anual\": $json.sizing?.results?.yearly_prod || null,\n      \"project_title\": $json.project_title || \"Proyecto Solar\"\n    }\n  }\n}}",
        "options": {
          "responseCode": 200
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        4240,
        -176
      ],
      "id": "2bcb29c8-ab3b-4162-ba0a-cbda0a31d9fe",
      "name": "Response Success"
    },
    {
      "parameters": {
        "url": "https://maps.googleapis.com/maps/api/geocode/json",
        "options": {},
        "queryParametersUi": {
          "parameter": [
            {
              "name": "address",
              "value": "={{ $json.output.direccion }}"
            },
            {
              "name": "key",
              "value": "AIzaSyBI6Vup5IKvfvlyvdhV_9nipF5FXaVnZ04"
            }
          ]
        }
      },
      "name": "Dirección a Pin1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1056,
        -176
      ],
      "id": "8d68c3a0-d7e6-4282-9d9f-76b31567c050"
    },
    {
      "parameters": {
        "functionCode": "const data = $json?.properties?.parameter?.ALLSKY_SFC_SW_DWN ?? {};\nconst keys = Object.keys(data);\n\nif (keys.length === 0) {\n  return {\n    datos_nasa_mensuales: {\n      irradiacion_promedio: [],\n      unidad_medida: \"kWh/m²/día\",\n      resumen: {\n        mejor_mes: null,\n        peor_mes: null\n      }\n    },\n    irradiacion_promedio_min: null,\n    irradiacion_promedio_max: null,\n    irradiacion_promedio_anual: null\n  };\n}\n\n// Mapeo de meses con orden para mantener secuencia correcta\nconst monthsMap = [\n  { numero: \"01\", nombre: \"Enero\",      orden: 1 },\n  { numero: \"02\", nombre: \"Febrero\",    orden: 2 },\n  { numero: \"03\", nombre: \"Marzo\",      orden: 3 },\n  { numero: \"04\", nombre: \"Abril\",      orden: 4 },\n  { numero: \"05\", nombre: \"Mayo\",       orden: 5 },\n  { numero: \"06\", nombre: \"Junio\",      orden: 6 },\n  { numero: \"07\", nombre: \"Julio\",      orden: 7 },\n  { numero: \"08\", nombre: \"Agosto\",     orden: 8 },\n  { numero: \"09\", nombre: \"Septiembre\", orden: 9 },\n  { numero: \"10\", nombre: \"Octubre\",    orden: 10 },\n  { numero: \"11\", nombre: \"Noviembre\",  orden: 11 },\n  { numero: \"12\", nombre: \"Diciembre\",  orden: 12 }\n];\n\n// Acumuladores\nconst sumPerMonth = {};\nconst countPerMonth = {};\nlet totalSum = 0;\nlet totalCount = 0;\n\n// Procesar datos - excluir mes 13 (promedios anuales)\nfor (const k of keys) {\n  const v = +data[k];\n  if (!Number.isFinite(v)) continue;\n  \n  const month = k.slice(4, 6); // YYYYMM...\n  \n  // Saltar mes 13 (promedios anuales en los datos originales)\n  if (month === \"13\") continue;\n  \n  if (!sumPerMonth[month]) {\n    sumPerMonth[month] = 0;\n    countPerMonth[month] = 0;\n  }\n  \n  sumPerMonth[month] += v;\n  countPerMonth[month] += 1;\n  totalSum += v;\n  totalCount += 1;\n}\n\n// Calcular promedio anual\nconst promedioAnual = totalCount > 0 ? +(totalSum / totalCount).toFixed(2) : null;\n\n// Crear array de irradiación promedio (ordenado por mes)\nconst irradiacionPromedio = monthsMap\n  .filter(m => m.numero in sumPerMonth) // Solo meses con datos\n  .map(m => {\n    const avg = sumPerMonth[m.numero] / countPerMonth[m.numero];\n    return {\n      mes: m.nombre,\n      irradiacion: +avg.toFixed(2),\n      orden: m.orden,\n      mes_numero: m.numero\n    };\n  })\n  .sort((a, b) => a.orden - b.orden); // Ordenar por mes natural\n\n// Calcular min y max de los promedios mensuales\nconst irradiacionValues = irradiacionPromedio.map(x => x.irradiacion);\nconst minIrradiacion = irradiacionValues.length > 0 ? Math.min(...irradiacionValues) : null;\nconst maxIrradiacion = irradiacionValues.length > 0 ? Math.max(...irradiacionValues) : null;\n\n// Estructura para datos_nasa_mensuales (JSONB) - formato simplificado\nconst datosNasaMensuales = {\n  irradiacion_promedio: irradiacionPromedio,\n  unidad_medida: \"kWh/m²/día\",\n  resumen: {\n    mejor_mes: irradiacionPromedio.length > 0 \n      ? irradiacionPromedio.reduce((max, curr) => \n          curr.irradiacion > max.irradiacion ? curr : max\n        ).mes \n      : null,\n    peor_mes: irradiacionPromedio.length > 0 \n      ? irradiacionPromedio.reduce((min, curr) => \n          curr.irradiacion < min.irradiacion ? curr : min\n        ).mes \n      : null\n  }\n};\n\n// Retornar objeto con los campos exactos para la base de datos\nreturn {\n  datos_nasa_mensuales: datosNasaMensuales,\n  irradiacion_promedio_min: minIrradiacion,\n  irradiacion_promedio_max: maxIrradiacion,\n  irradiacion_promedio_anual: promedioAnual\n};"
      },
      "name": "Calculate Annual Irradiation1",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2384,
        -64
      ],
      "id": "98f5c9c9-7157-4a1e-bcad-7beced1fc711"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.mistral.ai/v1/files",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mistralCloudApi",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "purpose",
              "value": "ocr"
            },
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data-frontal"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        16,
        -176
      ],
      "id": "2259519f-a48d-481a-9a78-77ad4922838c",
      "name": "Frontal",
      "credentials": {
        "mistralCloudApi": {
          "id": "PSmKQQtzOTwdxGCi",
          "name": "Mistral Cloud account varac"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "/*****************************************************\n * PV Sizing (mínimo-insumos, días/mes fijo = 30.4)\n * Usa SOLO:\n *   • output.consumo_max ............ kWh/mes (pico consumo histórico CFE)\n *   • irradiacion_promedio_anual ..... kWh/m²/día (NASA promedio)\n *****************************************************/\n\n//–––– Parámetros ajustables ––––\nconst PR            = 0.80;\nconst oversizeFact  = 1.05;\nconst panelWp_def   = 550;\nconst DAYS_PER_MONTH = 30.4;\n\n//–––– Entrada ––––\nconst j = items[0].json || {};\n\n// Preservar user_id y project data\nconst userId = j.user_id || 'unknown';\nconst projectTitle = j.project_title || 'Proyecto Solar';\nconst projectDescription = j.project_description || '';\n\n// $input.first().json.output.consumo_max\nconst kWhPeak = +j.output?.consumo_max || 0;\nif (!(kWhPeak > 0)) {\n  throw new Error('Falta output.consumo_max (>0).');\n}\nconst kWhYear = kWhPeak * 12;\n\n// $input.first().json.irradiacion_promedio_anual (CORREGIDO)\nconst irrDayAvg = +j.irradiacion_promedio_anual || NaN;\nif (!(irrDayAvg > 0)) {\n  throw new Error('Falta irradiacion_promedio_anual (>0).');\n}\n\n//–––– Rendimientos ––––\nconst specDayAvg = irrDayAvg * PR;\nconst specYieldMonth = specDayAvg * DAYS_PER_MONTH;\nconst specYieldAnnual = specDayAvg * 365;\n\n//–––– Potencia requerida ––––\nconst kWpByYear = kWhYear / specYieldAnnual;\nconst kWpByPeak = kWhPeak / specYieldMonth;\nconst kWpNeededRaw = Math.max(kWpByYear, kWpByPeak);\nconst kWpNeeded = +(kWpNeededRaw * oversizeFact).toFixed(2);\n\n//–––– Módulos ––––\nconst panelWp = +j.panel_wp > 0 ? +j.panel_wp : panelWp_def;\nconst nPanels = Math.ceil((kWpNeeded * 1000) / panelWp);\n\n//–––– Producción ––––\nconst yearlyProd = +(specYieldAnnual * kWpNeeded).toFixed(0);\n\n//–––– Salida ––––\nitems[0].json = {\n  ...j,\n  user_id: userId, // Asegurar que user_id se pasa\n  project_title: projectTitle,\n  project_description: projectDescription,\n  sizing: {\n    inputs: {\n      kWh_peak_month: kWhPeak,\n      kWh_year_assumed: kWhYear,\n      irr_avg_day: irrDayAvg,\n      days_per_month: DAYS_PER_MONTH,\n      PR,\n      oversize_fact: oversizeFact,\n      // Datos NASA disponibles\n      irr_min: +j.irradiacion_promedio_min || null,\n      irr_max: +j.irradiacion_promedio_max || null,\n      nasa_cache_id: j.id || null,\n      hash_ubicacion: j.hash_ubicacion || null\n    },\n    derived: {\n      spec_yield_avg_day: +specDayAvg.toFixed(2),\n      spec_yield_avg_month: +specYieldMonth.toFixed(2),\n      spec_yield_annual: +specYieldAnnual.toFixed(2),\n    },\n    results: {\n      kWp_needed: kWpNeeded,\n      panel_wp: panelWp,\n      n_panels: nPanels,\n      yearly_prod: yearlyProd,\n    },\n    method_notes:\n      \"Sizing basado en output.consumo_max (pico mensual) y irradiacion_promedio_anual (kWh/m²/día) de NASA; conversión con 30.4 d/mes fijo; anual = 365×promedio.\"\n  }\n};\n\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3584,
        -176
      ],
      "id": "a9fa1bdc-f2a7-46b6-b6d2-ce51a478196c",
      "name": "Code"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO cotizaciones_inicial (\n  usuarios_id,\n  recibo_cfe,\n  consumo_kwh_historico,\n  resumen_energetico,\n  sizing_results,\n  irradiacion_cache_id\n) VALUES (\n  '{{ $json.user_id }}',\n  '{{ JSON.stringify($node[\"datos_recibo_frontal_cfe1\"].json.output || {}) }}'::jsonb,\n  '{{ JSON.stringify($node[\"datos_recibo_posterior_cfe\"].json.output?.consumo_historico || []) }}'::jsonb,\n  '{{ JSON.stringify({\n    consumo_max: $node[\"datos_recibo_posterior_cfe\"].json.output?.consumo_max || null,\n    consumo_promedio: Math.round(($node[\"datos_recibo_posterior_cfe\"].json.output?.consumo_historico || []).reduce((sum, item) => sum + item.kwh, 0) / ($node[\"datos_recibo_posterior_cfe\"].json.output?.consumo_historico?.length || 1)),\n    periodos_analizados: $node[\"datos_recibo_posterior_cfe\"].json.output?.consumo_historico?.length || 0\n  }) }}'::jsonb,\n  '{{ JSON.stringify($json.sizing || {}) }}'::jsonb,\n  {{ $json.id ? \"'\" + $json.id + \"'\" : 'NULL' }}\n) RETURNING id, usuarios_id",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        3808,
        -176
      ],
      "id": "27b44d1b-44b4-40d2-bbac-737ab3eae405",
      "name": "Save Cotizacion Inicial",
      "credentials": {
        "postgres": {
          "id": "jjHxTq8OTwLBl895",
          "name": "Postgres account supabase enerbook"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO proyectos (\n  titulo,\n  descripcion,\n  estado,\n  usuarios_id,\n  cotizaciones_inicial_id,\n  fecha_limite\n) VALUES (\n  '{{ $node[\"Code\"].json.project_title || \"Proyecto Solar\" }}',\n  '{{ $node[\"Code\"].json.project_description || \"\" }}',\n  'abierto',\n  '{{ $node[\"Code\"].json.user_id }}',\n  '{{ $node[\"Save Cotizacion Inicial\"].json.id }}',\n  NOW() + INTERVAL '30 days'\n) RETURNING id, titulo, usuarios_id, cotizaciones_inicial_id",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        4032,
        -176
      ],
      "id": "89a5b2c1-3f47-4d82-9e25-8c4a9f5e3d12",
      "name": "Create Project",
      "credentials": {
        "postgres": {
          "id": "jjHxTq8OTwLBl895",
          "name": "Postgres account supabase enerbook"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        3184,
        -176
      ],
      "id": "6d56ca7a-9e81-42b0-9e34-b6fa9426cfd4",
      "name": "Merge"
    },
    {
      "parameters": {
        "functionCode": "// Asegurar que user_id y project data se propague\nconst item = items[0];\n\n// Buscar user_id y project data en varios lugares posibles\nlet userId = null;\nlet projectTitle = null;\nlet projectDescription = null;\n\n// Primero intentar desde el item actual\nif (item.json.user_id) {\n  userId = item.json.user_id;\n}\nif (item.json.project_title) {\n  projectTitle = item.json.project_title;\n}\nif (item.json.project_description) {\n  projectDescription = item.json.project_description;\n}\n\n// Si faltan datos, buscar en el nodo Code1\nif (!userId || !projectTitle) {\n  try {\n    const code1Data = $node['Code1'].json;\n    if (Array.isArray(code1Data) && code1Data.length > 0) {\n      userId = userId || code1Data[0].user_id;\n      projectTitle = projectTitle || code1Data[0].project_title;\n      projectDescription = projectDescription || code1Data[0].project_description;\n    } else if (code1Data && typeof code1Data === 'object') {\n      userId = userId || code1Data.user_id;\n      projectTitle = projectTitle || code1Data.project_title;\n      projectDescription = projectDescription || code1Data.project_description;\n    }\n  } catch (error) {\n    console.log('Could not access Code1 data:', error.message);\n  }\n}\n\n// Valores por defecto\nuserId = userId || 'unknown';\nprojectTitle = projectTitle || 'Proyecto Solar';\nprojectDescription = projectDescription || '';\n\nconsole.log('Ensure Project Data - userId:', userId);\nconsole.log('Ensure Project Data - projectTitle:', projectTitle);\n\nif (userId === 'unknown') {\n  throw new Error('user_id is still unknown after all attempts - check frontend data');\n}\n\n// Asegurar que todos los datos se pasen\nreturn [{\n  json: {\n    ...item.json,\n    user_id: userId,\n    project_title: projectTitle,\n    project_description: projectDescription\n  },\n  binary: item.binary\n}];"
      },
      "name": "Ensure Project Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        3392,
        -176
      ],
      "id": "01d8cc94-5407-414f-9e65-a3dfc7b72e8f"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ocr-nuevo-proyecto",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -864,
        128
      ],
      "id": "eca66f6d-e9b0-45dd-977c-c51890ec5e41",
      "name": "Input",
      "webhookId": "cf3963cf-fb09-42f1-9ad3-a7954dfa5d0a"
    },
    {
      "parameters": {
        "jsCode": "const items = [];\n\n// Obtener el item de entrada\nconst inputItem = $input.all()[0];\n\n// Buscar user_id en múltiples formatos desde el webhook\nlet userId = null;\n\n// Primero intentar desde el body (FormData)\nif (inputItem.json.user_id) {\n  userId = inputItem.json.user_id;\n} else if (inputItem.json.userId) {\n  userId = inputItem.json.userId;\n} else if (inputItem.json.usuario_id) {\n  userId = inputItem.json.usuario_id;\n}\n\n// Si no está en el body, intentar desde query parameters\nif (!userId && $node['Input'].json.query) {\n  userId = $node['Input'].json.query.user_id;\n}\n\n// Último intento: desde headers\nif (!userId && $node['Input'].json.headers && $node['Input'].json.headers['user-id']) {\n  userId = $node['Input'].json.headers['user-id'];\n}\n\nconst projectTitle = inputItem.json.project_title || 'Proyecto Solar';\nconst projectDescription = inputItem.json.project_description || '';\n\nconsole.log('Debug - Input item:', JSON.stringify(inputItem.json, null, 2));\nconsole.log('Debug - Found user_id:', userId);\n\nif (!userId) {\n  throw new Error('user_id is required for nuevo proyecto workflow - received: ' + JSON.stringify(inputItem.json));\n}\n\n// Crear item para data-frontal\nif (inputItem.binary && inputItem.binary['data-frontal']) {\n  items.push({\n    json: { \n      type: 'frontal', \n      user_id: userId,\n      project_title: projectTitle,\n      project_description: projectDescription\n    },\n    binary: { 'data-frontal': inputItem.binary['data-frontal'] }\n  });\n}\n\n// Crear item para data-posterior  \nif (inputItem.binary && inputItem.binary['data-posterior']) {\n  items.push({\n    json: { \n      type: 'posterior', \n      user_id: userId,\n      project_title: projectTitle,\n      project_description: projectDescription\n    },\n    binary: { 'data-posterior': inputItem.binary['data-posterior'] }\n  });\n}\n\n// Si no hay binarios, crear item básico con user_id\nif (items.length === 0) {\n  items.push({\n    json: { \n      type: 'empty', \n      user_id: userId,\n      project_title: projectTitle,\n      project_description: projectDescription\n    }\n  });\n}\n\nconsole.log('Debug - Created items:', items.length);\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -640,
        128
      ],
      "id": "7e99c0be-f555-4fbb-a2a0-857a8235af70",
      "name": "Code1"
    },
    {
      "parameters": {
        "mode": "expression",
        "numberOutputs": 2,
        "output": "={{ $json.type === 'frontal' ? 0 : 1 }}",
        "looseTypeValidation": true
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -432,
        128
      ],
      "id": "d93b680a-974c-4d41-bb25-8405730002e4",
      "name": "Switch"
    },
    {
      "parameters": {
        "url": "https://power.larc.nasa.gov/api/temporal/monthly/point",
        "options": {},
        "queryParametersUi": {
          "parameter": [
            {
              "name": "parameters",
              "value": "ALLSKY_SFC_SW_DWN"
            },
            {
              "name": "community",
              "value": "RE"
            },
            {
              "name": "latitude",
              "value": "={{ $('Generate Cache Key').item.json.latitude }}"
            },
            {
              "name": "longitude",
              "value": "={{ $('Generate Cache Key').item.json.longitude }}"
            },
            {
              "name": "start",
              "value": "2015"
            },
            {
              "name": "end",
              "value": "2024"
            },
            {
              "name": "format",
              "value": "JSON"
            }
          ]
        }
      },
      "name": "Get Annual Solar",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2160,
        -64
      ],
      "id": "3e6752d3-45ec-455e-946c-ed86023ac01f"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1104,
        656
      ],
      "id": "ded8b6bf-c285-4dd5-8b68-cd04e8219dc5",
      "name": "Google Gemini Chat Model"
    }
  ],
  "connections": {
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request2": {
      "main": [
        [
          {
            "node": "datos_recibo_posterior_cfe",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Posterior": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "datos_recibo_posterior_cfe": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Generate Cache Key": {
      "main": [
        [
          {
            "node": "Query Cache",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Query Cache": {
      "main": [
        [
          {
            "node": "Cache Exists?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cache Exists?": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Annual Solar",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save to Cache": {
      "main": [
        [
          {
            "node": "Merge Cache Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Cache Info": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "HTTP Request6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request6": {
      "main": [
        [
          {
            "node": "datos_recibo_frontal_cfe1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set": {
      "main": [
        [
          {
            "node": "Generate Cache Key",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "datos_recibo_frontal_cfe1": {
      "main": [
        [
          {
            "node": "Dirección a Pin1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Dirección a Pin1": {
      "main": [
        [
          {
            "node": "Set",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate Annual Irradiation1": {
      "main": [
        [
          {
            "node": "Save to Cache",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Cache Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Frontal": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Save Cotizacion Inicial",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Cotizacion Inicial": {
      "main": [
        [
          {
            "node": "Create Project",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Project": {
      "main": [
        [
          {
            "node": "Response Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Ensure Project Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ensure Project Data": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Input": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Frontal",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Posterior",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Annual Solar": {
      "main": [
        [
          {
            "node": "Calculate Annual Irradiation1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "datos_recibo_frontal_cfe1",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "datos_recibo_posterior_cfe",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "3dea49b7dd9b43976d38842c495efe40be7c7e03943c21cc3656ea0a8437e9d2"
  }
}