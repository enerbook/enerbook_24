{
  "nodes": [
    {
      "parameters": {
        "url": "=https://api.mistral.ai/v1/files/{{ $json.id }}/url",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mistralCloudApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "expiry",
              "value": "24"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2384,
        144
      ],
      "id": "1a1d3d63-fe29-422c-add9-b8e1b19366fa",
      "name": "HTTP Request1",
      "credentials": {
        "mistralCloudApi": {
          "id": "PSmKQQtzOTwdxGCi",
          "name": "Mistral Cloud account varac"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.mistral.ai/v1/ocr",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mistralCloudApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"mistral-ocr-latest\",\n  \"document\": {\n    \"type\": \"document_url\",\n    \"document_url\": \"{{ $json.url }}\"\n  },\n  \"include_image_base64\": false\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2608,
        144
      ],
      "id": "39f83bfd-794e-4849-9f17-9073605d58a0",
      "name": "HTTP Request2",
      "credentials": {
        "mistralCloudApi": {
          "id": "PSmKQQtzOTwdxGCi",
          "name": "Mistral Cloud account varac"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.mistral.ai/v1/files",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mistralCloudApi",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "purpose",
              "value": "ocr"
            },
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data-posterior"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2160,
        144
      ],
      "id": "298934b4-0f62-47bb-b782-86ca561642ab",
      "name": "Posterior",
      "credentials": {
        "mistralCloudApi": {
          "id": "PSmKQQtzOTwdxGCi",
          "name": "Mistral Cloud account varac"
        }
      }
    },
    {
      "parameters": {
        "text": "={\n  \"prompt\": {\n    \"role\": \"Extractor de Datos de Factura CFE\",\n    \"description\": \"Extrae los datos de consumo mensual en kWh desde una tabla markdown de una factura CFE. La tabla contiene rangos de fechas de facturación que deben convertirse al período correcto.\",\n    \"input_data\": \"{{ $json.pages[0].markdown }}\",\n    \"rules\": [\n      {\n        \"rule\": \"CRÍTICO: Los períodos en la tabla aparecen como rangos de fechas (ej: 'del 07 AGO 24 al 08 OCT 24'). Debes extraer ÚNICAMENTE la FECHA FINAL del rango (segundo mes y año).\"\n      },\n      {\n        \"rule\": \"EJEMPLO: 'del 07 AGO 24 al 08 OCT 24' → el período es 'OCT24' (no AGO24)\"\n      },\n      {\n        \"rule\": \"EJEMPLO: 'del 07 FEB 25 al 07 ABR 25' → el período es 'ABR25' (no FEB25)\"\n      },\n      {\n        \"rule\": \"El formato del período debe ser SIEMPRE: 3 letras del mes en MAYÚSCULAS + 2 dígitos del año (ej: OCT24, ABR25, DIC23)\"\n      },\n      {\n        \"rule\": \"Los meses abreviados válidos son: ENE, FEB, MAR, ABR, MAY, JUN, JUL, AGO, SEP, OCT, NOV, DIC\"\n      },\n      {\n        \"rule\": \"Si el mes ya está abreviado en 3 letras (JUN, FEB, DIC, AGO, OCT, ABR), manténlo tal cual\"\n      },\n      {\n        \"rule\": \"El año debe ser de 2 dígitos: 23, 24, 25, etc.\"\n      },\n      {\n        \"rule\": \"Extrae el consumo en kWh de la columna correspondiente como número entero\"\n      },\n      {\n        \"rule\": \"Si el consumo contiene comas (ej: 42,842), elimínalas para obtener el número entero (42842)\"\n      },\n      {\n        \"rule\": \"Ignora las columnas de 'Importe', 'Pagos' y 'Pendientes de Pago'\"\n      },\n      {\n        \"rule\": \"Elimina cualquier símbolo de moneda ($) y puntos decimales del consumo\"\n      },\n      {\n        \"rule\": \"Calcula 'consumo_max' como el valor máximo de kWh entre todos los períodos extraídos\"\n      },\n      {\n        \"rule\": \"NO incluyas encabezados, totales, promedios o filas sin datos válidos\"\n      },\n      {\n        \"rule\": \"Si una celda está vacía o no contiene datos numéricos de consumo, omite esa fila\"\n      },\n      {\n        \"rule\": \"NO inventes valores. Usa ÚNICAMENTE los datos presentes en la tabla\"\n      },\n      {\n        \"rule\": \"El orden de los elementos en 'consumo_historico' debe mantener el orden cronológico de la tabla (del más reciente al más antiguo o viceversa según aparezca)\"\n      },\n      {\n        \"rule\": \"CRÍTICO: El resultado debe ser ÚNICAMENTE un objeto JSON válido, sin texto adicional, sin explicaciones, sin markdown, sin bloques de código. Solo el JSON puro.\"\n      }\n    ],\n    \"output_example\": {\n      \"consumo_historico\": [\n        {\"periodo\": \"ABR25\", \"kwh\": 198},\n        {\"periodo\": \"FEB25\", \"kwh\": 196},\n        {\"periodo\": \"DIC24\", \"kwh\": 183},\n        {\"periodo\": \"OCT24\", \"kwh\": 204},\n        {\"periodo\": \"AGO24\", \"kwh\": 192},\n        {\"periodo\": \"JUN24\", \"kwh\": 223},\n        {\"periodo\": \"ABR24\", \"kwh\": 200},\n        {\"periodo\": \"FEB24\", \"kwh\": 193},\n        {\"periodo\": \"DIC23\", \"kwh\": 247},\n        {\"periodo\": \"OCT23\", \"kwh\": 268},\n        {\"periodo\": \"AGO23\", \"kwh\": 268}\n      ],\n      \"consumo_max\": 268\n    },\n    \"response_format\": \"JSON\",\n    \"validation\": {\n      \"check\": \"Verifica que cada período extraído corresponda a la FECHA FINAL del rango mostrado en la tabla\",\n      \"example_correct\": \"'del 07 JUN 24 al 07 AGO 24' → AGO24 ✓\",\n      \"example_wrong\": \"'del 07 JUN 24 al 07 AGO 24' → JUN24 ✗\"\n    }\n  }\n}",
        "schemaType": "fromJson",
        "jsonSchemaExample": "{\n  \"consumo_historico\": [{\n    \"periodo\": \"\",\n    \"kwh\": 0\n  }],\n  \"consumo_max\": 0\n}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.informationExtractor",
      "typeVersion": 1.2,
      "position": [
        2816,
        144
      ],
      "id": "1c3c3d19-5071-45f5-9323-fa1ddb19e7d7",
      "name": "datos_recibo_posterior_cfe"
    },
    {
      "parameters": {
        "functionCode": "// OPCIÓN 1: Hash simple sin crypto (RECOMENDADA)\n// Ahora accedemos correctamente a los datos del nodo anterior 'Set'\nconst lat = $json.latitude || 0;\nconst lng = $json.longitude || 0;\nconst radioKm = 5;\n\n// Verificar que tenemos coordenadas válidas\nif (!lat || !lng) {\n  throw new Error('No se encontraron coordenadas válidas. Latitude: ' + lat + ', Longitude: ' + lng);\n}\n\n// Crear grid redondeado para optimizar caché\nconst latGrid = Math.round(lat * 100) / 100;\nconst lngGrid = Math.round(lng * 100) / 100;\n\n// Hash simple pero efectivo\nfunction createLocationHash(lat, lng) {\n  const str = `${lat},${lng}`;\n  let hash = 0;\n  \n  for (let i = 0; i < str.length; i++) {\n    const char = str.charCodeAt(i);\n    hash = ((hash << 5) - hash) + char;\n    hash = hash & hash;\n  }\n  \n  return Math.abs(hash).toString(36);\n}\n\nconst hashUbicacion = createLocationHash(latGrid, lngGrid);\n\nreturn [{\n  json: {\n    latitude: lat,\n    longitude: lng,\n    lat_grid: latGrid,\n    lng_grid: lngGrid,\n    radio_km: radioKm,\n    hash_ubicacion: hashUbicacion\n  }\n}];"
      },
      "name": "Generate Cache Key",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1504,
        -176
      ],
      "id": "89d86363-f04e-4435-b990-91c6f35fa588"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  id,\n  datos_nasa_mensuales,\n  irradiacion_promedio_min,\n  irradiacion_promedio_max,\n  irradiacion_promedio_anual,\n  fecha_obtencion,\n  vigente_hasta,\n  hash_ubicacion\nFROM irradiacion_cache \nWHERE hash_ubicacion = '{{ $json.hash_ubicacion }}'\nORDER BY created_at DESC \nLIMIT 1;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        1728,
        -176
      ],
      "id": "732f3a16-8d84-448d-b75e-aa90881fcc3b",
      "name": "Query Cache",
      "alwaysOutputData": true,
      "executeOnce": false,
      "credentials": {
        "postgres": {
          "id": "jjHxTq8OTwLBl895",
          "name": "Postgres account supabase enerbook"
        }
      },
      "notes": "0"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "leftValue": "={{ $json.hash_ubicacion }}",
              "rightValue": 0,
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              },
              "id": "5cf8b301-7de2-44da-a225-ff4e5e70b422"
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1936,
        -176
      ],
      "id": "7a23ba52-901f-4541-8277-fc80f9c0b12b",
      "name": "Cache Exists?"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- INSERT COMPLETO - Todos los campos integrados\nINSERT INTO irradiacion_cache (\n  lat_grid,\n  lng_grid,\n  radio_km,\n  datos_nasa_mensuales,\n  irradiacion_promedio_min,\n  irradiacion_promedio_max,\n  irradiacion_promedio_anual,\n  fecha_obtencion,\n  vigente_hasta,\n  hash_ubicacion,\n  region_nombre\n) VALUES (\n  {{ $node[\"Generate Cache Key\"].json.lat_grid }},\n  {{ $node[\"Generate Cache Key\"].json.lng_grid }},\n  {{ $node[\"Generate Cache Key\"].json.radio_km }},\n  '{{ JSON.stringify($node[\"Calculate Annual Irradiation1\"].json.datos_nasa_mensuales) }}'::jsonb,\n  {{ $node[\"Calculate Annual Irradiation1\"].json.irradiacion_promedio_min }},\n  {{ $node[\"Calculate Annual Irradiation1\"].json.irradiacion_promedio_max }},\n  {{ $node[\"Calculate Annual Irradiation1\"].json.irradiacion_promedio_anual }},\n  NOW(),\n  NOW() + INTERVAL '6 months',\n  '{{ $node[\"Generate Cache Key\"].json.hash_ubicacion }}',\n  \n    '{{ \n    $node[\"Dirección a Pin1\"].json.results[0].address_components\n      .filter(component => component.types.includes(\"administrative_area_level_1\"))[0]\n      ?.long_name || \"Estado no encontrado\"\n  }}'\n)\nRETURNING id, hash_ubicacion;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        2640,
        -144
      ],
      "id": "db8d2bf3-b7bb-41c1-89e8-90ba9dc910bb",
      "name": "Save to Cache",
      "credentials": {
        "postgres": {
          "id": "jjHxTq8OTwLBl895",
          "name": "Postgres account supabase enerbook"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Fusionar los datos de irradiación con la información de caché guardado\nconst irradiacionData = $node[\"Calculate Annual Irradiation1\"].json;\n// Corregir acceso a datos de Postgres - no usar [0]\nconst cacheInfo = $json || {};\n\n// Obtener temp_lead_id desde el nodo Code1 donde se genera originalmente\nlet tempLeadId = 'unknown';\n\ntry {\n  // Acceder directamente al nodo Code1 que genera el temp_lead_id\n  const code1Items = $node[\"Code1\"].json;\n  if (Array.isArray(code1Items)) {\n    tempLeadId = code1Items[0]?.temp_lead_id || 'unknown';\n  } else if (code1Items?.temp_lead_id) {\n    tempLeadId = code1Items.temp_lead_id;\n  }\n} catch (error) {\n  console.error('Error getting temp_lead_id:', error);\n  tempLeadId = 'lead_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n}\n\nreturn [{\n  json: {\n    ...irradiacionData,\n    cache_saved: true,\n    cache_id: cacheInfo.id,\n    hash_ubicacion: cacheInfo.hash_ubicacion,\n    temp_lead_id: tempLeadId\n  }\n}];"
      },
      "name": "Merge Cache Info",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2896,
        -64
      ],
      "id": "62ef73dc-69a6-4fc4-b9f0-6c8d03be56dd"
    },
    {
      "parameters": {
        "url": "=https://api.mistral.ai/v1/files/{{ $json.id }}/url",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mistralCloudApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "expiry",
              "value": "24"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        240,
        -176
      ],
      "id": "118eb3e8-9bc2-4333-87d9-a8e17848a079",
      "name": "HTTP Request",
      "credentials": {
        "mistralCloudApi": {
          "id": "PSmKQQtzOTwdxGCi",
          "name": "Mistral Cloud account varac"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.mistral.ai/v1/ocr",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mistralCloudApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"mistral-ocr-latest\",\n  \"document\": {\n    \"type\": \"document_url\",\n    \"document_url\": \"{{ $json.url }}\"\n  },\n  \"include_image_base64\": false\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        464,
        -176
      ],
      "id": "69944a98-d18d-42d9-a48a-b756ffbbf1c0",
      "name": "HTTP Request6",
      "credentials": {
        "mistralCloudApi": {
          "id": "PSmKQQtzOTwdxGCi",
          "name": "Mistral Cloud account varac"
        }
      }
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "number": [
            {
              "name": "latitude",
              "value": "={{ $node[\"Dirección a Pin1\"].json[\"results\"][0][\"geometry\"][\"location\"][\"lat\"] }}"
            },
            {
              "name": "longitude",
              "value": "={{ $node[\"Dirección a Pin1\"].json[\"results\"][0][\"geometry\"][\"location\"][\"lng\"] }}"
            }
          ],
          "string": [
            {
              "name": "place_id",
              "value": "={{ $node[\"Dirección a Pin1\"].json[\"results\"][0][\"place_id\"] }}"
            }
          ]
        },
        "options": {}
      },
      "name": "Set",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        1280,
        -176
      ],
      "id": "2ae52357-695c-4ac8-8567-c8290da41ff0"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ \n  {\n    \"success\": true,\n    \"temp_lead_id\": $node[\"Save Temp Quote\"].json.temp_lead_id || \"unknown\",\n    \"message\": \"Análisis energético completado\",\n    \"redirect_url\": \"/dashboard?temp_lead_id=\" + ($node[\"Save Temp Quote\"].json.temp_lead_id || \"unknown\"),\n    \"data\": {\n      \"consumo_max\": $json.output?.consumo_max || null,\n      \"sistema_requerido\": $json.sizing?.results?.kWp_needed || null,\n      \"paneles\": $json.sizing?.results?.n_panels || null,\n      \"produccion_anual\": $json.sizing?.results?.yearly_prod || null\n    }\n  }\n}}",
        "options": {
          "responseCode": 200
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        4016,
        -176
      ],
      "id": "cabb439a-7d6c-4f90-affe-281554af323d",
      "name": "Irradiación1"
    },
    {
      "parameters": {
        "url": "https://maps.googleapis.com/maps/api/geocode/json",
        "options": {},
        "queryParametersUi": {
          "parameter": [
            {
              "name": "address",
              "value": "={{ $json.output.direccion }}"
            },
            {
              "name": "key",
              "value": "AIzaSyBI6Vup5IKvfvlyvdhV_9nipF5FXaVnZ04"
            }
          ]
        }
      },
      "name": "Dirección a Pin1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1056,
        -176
      ],
      "id": "67c3fe86-3adf-48be-ab3f-b7bd1f7aa37c"
    },
    {
      "parameters": {
        "functionCode": "const data = $json?.properties?.parameter?.ALLSKY_SFC_SW_DWN ?? {};\nconst keys = Object.keys(data);\n\nif (keys.length === 0) {\n  return {\n    datos_nasa_mensuales: {\n      irradiacion_promedio: [],\n      unidad_medida: \"kWh/m²/día\",\n      resumen: {\n        mejor_mes: null,\n        peor_mes: null\n      }\n    },\n    irradiacion_promedio_min: null,\n    irradiacion_promedio_max: null,\n    irradiacion_promedio_anual: null\n  };\n}\n\n// Mapeo de meses con orden para mantener secuencia correcta\nconst monthsMap = [\n  { numero: \"01\", nombre: \"Enero\",      orden: 1 },\n  { numero: \"02\", nombre: \"Febrero\",    orden: 2 },\n  { numero: \"03\", nombre: \"Marzo\",      orden: 3 },\n  { numero: \"04\", nombre: \"Abril\",      orden: 4 },\n  { numero: \"05\", nombre: \"Mayo\",       orden: 5 },\n  { numero: \"06\", nombre: \"Junio\",      orden: 6 },\n  { numero: \"07\", nombre: \"Julio\",      orden: 7 },\n  { numero: \"08\", nombre: \"Agosto\",     orden: 8 },\n  { numero: \"09\", nombre: \"Septiembre\", orden: 9 },\n  { numero: \"10\", nombre: \"Octubre\",    orden: 10 },\n  { numero: \"11\", nombre: \"Noviembre\",  orden: 11 },\n  { numero: \"12\", nombre: \"Diciembre\",  orden: 12 }\n];\n\n// Acumuladores\nconst sumPerMonth = {};\nconst countPerMonth = {};\nlet totalSum = 0;\nlet totalCount = 0;\n\n// Procesar datos - excluir mes 13 (promedios anuales)\nfor (const k of keys) {\n  const v = +data[k];\n  if (!Number.isFinite(v)) continue;\n  \n  const month = k.slice(4, 6); // YYYYMM...\n  \n  // Saltar mes 13 (promedios anuales en los datos originales)\n  if (month === \"13\") continue;\n  \n  if (!sumPerMonth[month]) {\n    sumPerMonth[month] = 0;\n    countPerMonth[month] = 0;\n  }\n  \n  sumPerMonth[month] += v;\n  countPerMonth[month] += 1;\n  totalSum += v;\n  totalCount += 1;\n}\n\n// Calcular promedio anual\nconst promedioAnual = totalCount > 0 ? +(totalSum / totalCount).toFixed(2) : null;\n\n// Crear array de irradiación promedio (ordenado por mes)\nconst irradiacionPromedio = monthsMap\n  .filter(m => m.numero in sumPerMonth) // Solo meses con datos\n  .map(m => {\n    const avg = sumPerMonth[m.numero] / countPerMonth[m.numero];\n    return {\n      mes: m.nombre,\n      irradiacion: +avg.toFixed(2),\n      orden: m.orden,\n      mes_numero: m.numero\n    };\n  })\n  .sort((a, b) => a.orden - b.orden); // Ordenar por mes natural\n\n// Calcular min y max de los promedios mensuales\nconst irradiacionValues = irradiacionPromedio.map(x => x.irradiacion);\nconst minIrradiacion = irradiacionValues.length > 0 ? Math.min(...irradiacionValues) : null;\nconst maxIrradiacion = irradiacionValues.length > 0 ? Math.max(...irradiacionValues) : null;\n\n// Estructura para datos_nasa_mensuales (JSONB) - formato simplificado\nconst datosNasaMensuales = {\n  irradiacion_promedio: irradiacionPromedio,\n  unidad_medida: \"kWh/m²/día\",\n  resumen: {\n    mejor_mes: irradiacionPromedio.length > 0 \n      ? irradiacionPromedio.reduce((max, curr) => \n          curr.irradiacion > max.irradiacion ? curr : max\n        ).mes \n      : null,\n    peor_mes: irradiacionPromedio.length > 0 \n      ? irradiacionPromedio.reduce((min, curr) => \n          curr.irradiacion < min.irradiacion ? curr : min\n        ).mes \n      : null\n  }\n};\n\n// Retornar objeto con los campos exactos para la base de datos\nreturn {\n  datos_nasa_mensuales: datosNasaMensuales,\n  irradiacion_promedio_min: minIrradiacion,\n  irradiacion_promedio_max: maxIrradiacion,\n  irradiacion_promedio_anual: promedioAnual\n};"
      },
      "name": "Calculate Annual Irradiation1",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2384,
        -64
      ],
      "id": "fdb368a6-dcb7-41bc-a1ff-40c720f14113"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.mistral.ai/v1/files",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mistralCloudApi",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "purpose",
              "value": "ocr"
            },
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data-frontal"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        16,
        -176
      ],
      "id": "22e1b6d4-ae52-400a-b22b-fed2df1d8276",
      "name": "Frontal",
      "credentials": {
        "mistralCloudApi": {
          "id": "PSmKQQtzOTwdxGCi",
          "name": "Mistral Cloud account varac"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "/*****************************************************\n * PV Sizing (mínimo-insumos, días/mes fijo = 30.4)\n * Usa SOLO:\n *   • output.consumo_max ............ kWh/mes (pico consumo histórico CFE)\n *   • irradiacion_promedio_anual ..... kWh/m²/día (NASA promedio)\n *****************************************************/\n\n//–––– Parámetros ajustables ––––\nconst PR            = 0.80;\nconst oversizeFact  = 1.05;\nconst panelWp_def   = 550;\nconst DAYS_PER_MONTH = 30.4;\n\n//–––– Entrada ––––\nconst j = items[0].json || {};\n\n// Preservar temp_lead_id\nconst tempLeadId = j.temp_lead_id || 'unknown';\n\n// $input.first().json.output.consumo_max\nconst kWhPeak = +j.output?.consumo_max || 0;\nif (!(kWhPeak > 0)) {\n  throw new Error('Falta output.consumo_max (>0).');\n}\nconst kWhYear = kWhPeak * 12;\n\n// $input.first().json.irradiacion_promedio_anual (CORREGIDO)\nconst irrDayAvg = +j.irradiacion_promedio_anual || NaN;\nif (!(irrDayAvg > 0)) {\n  throw new Error('Falta irradiacion_promedio_anual (>0).');\n}\n\n//–––– Rendimientos ––––\nconst specDayAvg = irrDayAvg * PR;\nconst specYieldMonth = specDayAvg * DAYS_PER_MONTH;\nconst specYieldAnnual = specDayAvg * 365;\n\n//–––– Potencia requerida ––––\nconst kWpByYear = kWhYear / specYieldAnnual;\nconst kWpByPeak = kWhPeak / specYieldMonth;\nconst kWpNeededRaw = Math.max(kWpByYear, kWpByPeak);\nconst kWpNeeded = +(kWpNeededRaw * oversizeFact).toFixed(2);\n\n//–––– Módulos ––––\nconst panelWp = +j.panel_wp > 0 ? +j.panel_wp : panelWp_def;\nconst nPanels = Math.ceil((kWpNeeded * 1000) / panelWp);\n\n//–––– Producción ––––\nconst yearlyProd = +(specYieldAnnual * kWpNeeded).toFixed(0);\n\n//–––– Salida ––––\nitems[0].json = {\n  ...j,\n  temp_lead_id: tempLeadId, // Asegurar que temp_lead_id se pasa\n  sizing: {\n    inputs: {\n      kWh_peak_month: kWhPeak,\n      kWh_year_assumed: kWhYear,\n      irr_avg_day: irrDayAvg,\n      days_per_month: DAYS_PER_MONTH,\n      PR,\n      oversize_fact: oversizeFact,\n      // Datos NASA disponibles\n      irr_min: +j.irradiacion_promedio_min || null,\n      irr_max: +j.irradiacion_promedio_max || null,\n      nasa_cache_id: j.id || null,\n      hash_ubicacion: j.hash_ubicacion || null\n    },\n    derived: {\n      spec_yield_avg_day: +specDayAvg.toFixed(2),\n      spec_yield_avg_month: +specYieldMonth.toFixed(2),\n      spec_yield_annual: +specYieldAnnual.toFixed(2),\n    },\n    results: {\n      kWp_needed: kWpNeeded,\n      panel_wp: panelWp,\n      n_panels: nPanels,\n      yearly_prod: yearlyProd,\n    },\n    method_notes:\n      \"Sizing basado en output.consumo_max (pico mensual) y irradiacion_promedio_anual (kWh/m²/día) de NASA; conversión con 30.4 d/mes fijo; anual = 365×promedio.\"\n  }\n};\n\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3584,
        -176
      ],
      "id": "b396c82c-d333-4f96-82d9-b63e4a53b320",
      "name": "Code"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO cotizaciones_leads_temp (\n  temp_lead_id,\n  recibo_cfe,\n  consumo_kwh_historico,\n  resumen_energetico,\n  sizing_results,\n  irradiacion_cache_id\n) VALUES (\n  '{{ $json.temp_lead_id || \"unknown\" }}',\n  '{{ JSON.stringify($node[\"datos_recibo_frontal_cfe1\"].json.output || {}) }}'::jsonb,\n  '{{ JSON.stringify($node[\"datos_recibo_posterior_cfe\"].json.output?.consumo_historico || []) }}'::jsonb,\n  '{{ JSON.stringify({\n    consumo_max: $node[\"datos_recibo_posterior_cfe\"].json.output?.consumo_max || null,\n    consumo_promedio: Math.round(($node[\"datos_recibo_posterior_cfe\"].json.output?.consumo_historico || []).reduce((sum, item) => sum + item.kwh, 0) / ($node[\"datos_recibo_posterior_cfe\"].json.output?.consumo_historico?.length || 1)),\n    periodos_analizados: $node[\"datos_recibo_posterior_cfe\"].json.output?.consumo_historico?.length || 0\n  }) }}'::jsonb,\n  '{{ JSON.stringify($json.sizing || {}) }}'::jsonb,\n  {{ ($json.cache_id || $json.id) ? \"'\" + ($json.cache_id || $json.id) + \"'\" : 'NULL' }}\n) RETURNING id, temp_lead_id",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        3808,
        -176
      ],
      "id": "5f3e54dc-c83a-4d5a-bb9e-ba6f7ca635d3",
      "name": "Save Temp Quote",
      "credentials": {
        "postgres": {
          "id": "jjHxTq8OTwLBl895",
          "name": "Postgres account supabase enerbook"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        3184,
        -176
      ],
      "id": "d50068be-3969-4765-b06f-8dc1a922ae4f",
      "name": "Merge"
    },
    {
      "parameters": {
        "functionCode": "// Asegurar que temp_lead_id se propague\nconst item = items[0];\n\n// Buscar temp_lead_id en varios lugares posibles\nlet tempLeadId = null;\n\n// Primero intentar desde el item actual\nif (item.json.temp_lead_id) {\n  tempLeadId = item.json.temp_lead_id;\n}\n\n// Si no está, generar uno nuevo\nif (!tempLeadId || tempLeadId === 'unknown') {\n  tempLeadId = 'lead_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n}\n\n// Asegurar que todos los datos se pasen con el temp_lead_id\nreturn [{\n  json: {\n    ...item.json,\n    temp_lead_id: tempLeadId\n  },\n  binary: item.binary\n}];"
      },
      "name": "Ensure TempLeadId",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        3392,
        -176
      ],
      "id": "91dacb31-30cd-4d65-a585-2736fb80c02d"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ocr-input",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -864,
        128
      ],
      "id": "669e91b7-fa9b-4ccc-945b-92f111cb7d57",
      "name": "Input",
      "webhookId": "ac352058-a428-4e50-b361-d7d62480c7e7"
    },
    {
      "parameters": {
        "jsCode": "const items = [];\n\n// Obtener el item de entrada\nconst inputItem = $input.all()[0];\n\n// Generar temp_lead_id único\nconst tempLeadId = `lead_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n// Crear item para data-frontal\nif (inputItem.binary['data-frontal']) {\n  items.push({\n    json: { type: 'frontal', temp_lead_id: tempLeadId },\n    binary: { 'data-frontal': inputItem.binary['data-frontal'] }\n  });\n}\n\n// Crear item para data-posterior  \nif (inputItem.binary['data-posterior']) {\n  items.push({\n    json: { type: 'posterior', temp_lead_id: tempLeadId },\n    binary: { 'data-posterior': inputItem.binary['data-posterior'] }\n  });\n}\n\n// Si no hay binarios, crear item básico con temp_lead_id\nif (items.length === 0) {\n  items.push({\n    json: { type: 'empty', temp_lead_id: tempLeadId }\n  });\n}\n\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -640,
        128
      ],
      "id": "f06eb2c2-849a-4cb7-a123-49808460e40d",
      "name": "Code1"
    },
    {
      "parameters": {
        "mode": "expression",
        "numberOutputs": 2,
        "output": "={{ $json.type === 'frontal' ? 0 : 1 }}",
        "looseTypeValidation": true
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -432,
        128
      ],
      "id": "c7bfed0f-2ca0-4743-a16f-53145a28f42b",
      "name": "Switch"
    },
    {
      "parameters": {
        "url": "https://power.larc.nasa.gov/api/temporal/monthly/point",
        "options": {},
        "queryParametersUi": {
          "parameter": [
            {
              "name": "parameters",
              "value": "ALLSKY_SFC_SW_DWN"
            },
            {
              "name": "community",
              "value": "RE"
            },
            {
              "name": "latitude",
              "value": "={{ $('Generate Cache Key').item.json.latitude }}"
            },
            {
              "name": "longitude",
              "value": "={{ $('Generate Cache Key').item.json.longitude }}"
            },
            {
              "name": "start",
              "value": "2015"
            },
            {
              "name": "end",
              "value": "2024"
            },
            {
              "name": "format",
              "value": "JSON"
            }
          ]
        }
      },
      "name": "Get Annual Solar",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2160,
        -64
      ],
      "id": "a4e1b0f4-19e4-4853-8af6-49e974db9de0"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "claude-3-haiku-20240307",
          "mode": "list",
          "cachedResultName": "Claude Haiku 3"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.3,
      "position": [
        1712,
        512
      ],
      "id": "bf68fb42-0c4a-4bce-8162-4fc827ddbfa3",
      "name": "Anthropic Chat Model",
      "credentials": {
        "anthropicApi": {
          "id": "CoNkmjeMGzkDNaXN",
          "name": "Anthropic account"
        }
      }
    },
    {
      "parameters": {
        "text": "={\n  \"role\": \"Extractor Especializado de Recibos CFE\",\n  \"description\": \"Extrae información completa de recibos de la Comisión Federal de Electricidad (CFE) de México. Devuelve ÚNICAMENTE JSON válido sin explicaciones adicionales.\",\n  \"input_data\": \"{{ $json.pages[0].markdown }}\",\n  \"instrucciones\": \"Lee TODO el texto completo antes de extraer. NO cortes información parcial - extrae campos completos. Si un campo no existe, usa null. El resultado debe ser SOLO JSON válido, sin markdown, sin bloques de código, sin explicaciones.\",\n  \"campos_a_extraer\": {\n    \"no_servicio\": \"Busca 'NO. DE SERVICIO:' y extrae el número completo (generalmente 12 dígitos). Ejemplo: 219890418432\",\n    \"RMU\": \"Busca 'RMU:' y extrae el código completo incluyendo números, guiones y texto (incluye TODO hasta el siguiente campo). Ejemplo: 72270 89-04-01 XAXX-010101 061 CFE\",\n    \"cuenta\": \"Busca 'CUENTA:' o 'CFE CUENTA:' y extrae el código alfanumérico completo (generalmente 16 caracteres). Ejemplo: 12DV08C011231540\",\n    \"tarifa\": \"Busca 'TARIFA:' y extrae el código (puede ser numérico como 01 o alfanumérico como GDMTH). Ejemplo: 01\",\n    \"no_medidor\": \"Busca 'NO. MEDIDOR:' o 'NO MEDIDOR:' y extrae el identificador completo. Ejemplo: 0B48J7\",\n    \"multiplicador\": \"Busca 'MULTIPLICADOR:' y extrae el número. Ejemplo: 1\",\n    \"no_hilos\": \"Busca 'NO HILOS:' o 'NO. HILOS:' y extrae el número (generalmente 1, 2 o 3). Ejemplo: 1\",\n    \"nombre\": \"Busca el nombre del cliente al inicio del recibo, antes de la dirección (generalmente en MAYÚSCULAS después del logo CFE). Ejemplo: FELIPE CARRANZA R\",\n    \"direccion\": \"Extrae la dirección COMPLETA del cliente tal como aparece en el recibo, sin modificar. Incluye calle, número, colonia, código postal, ciudad y estado. Ejemplo: 42 NTE 2207 PROLG 22 PINO SUAREZ Y BLVD XONACA DIEZ DE MAYO 08JC.P.72270 PUEBLA,PUE.\",\n    \"direccion_formatted\": \"Reformatea la dirección: 1) Convierte a formato título (primera letra mayúscula). 2) Elimina referencias: NAVE, BODEGA, LOCAL, DEPTO, OFICINA, PISO, INTERIOR + números. 3) Estandariza: AV/AVE a Av., CALLE a Calle, BLVD a Blvd., COL a Col., FRACC a Fracc. 4) Convierte estados: PUE a Puebla, QRO a Querétaro, CDMX/DF a Ciudad de México. 5) Agrega ', México' al final. Formato: 'Calle Número, Colonia, CP Ciudad, Estado, México'\",\n    \"periodo_inicio\": \"Busca 'PERIODO FACTURADO:' y extrae la primera fecha. Convierte del formato 'DD MES AA' (ejemplo: 07 ABR 25) al formato ISO 8601 'YYYY-MM-DD' (ejemplo: 2025-04-07). Meses: ENE=01, FEB=02, MAR=03, ABR=04, MAY=05, JUN=06, JUL=07, AGO=08, SEP=09, OCT=10, NOV=11, DIC=12. Año: 25=2025, 24=2024.\",\n    \"periodo_fin\": \"Busca 'PERIODO FACTURADO:' y extrae la segunda fecha (después del guión o 'al'). Convierte del formato 'DD MES AA' (ejemplo: 06 JUN 25) al formato ISO 8601 'YYYY-MM-DD' (ejemplo: 2025-06-06).\",\n    \"kwh_total\": \"Busca en la tabla de consumo 'Energía (kWh)' la columna 'Total período' y suma TODOS los valores de kWh (Básico + Intermedio + Excedente). Devuelve como número entero sin decimales ni comas. Ejemplo: si Básico=150 e Intermedio=27, entonces 177\",\n    \"total_pagar_mxn\": \"Busca el monto total a pagar (aparece como 'TOTAL A PAGAR:' o 'Total' en tabla de desglose con símbolo $). Elimina símbolos de moneda y comas, convierte a número decimal con punto y 2 decimales. Ejemplo: $242 = 242.00 o 242.56 = 242.56\"\n  },\n  \"validaciones\": \"Verifica que no_servicio tenga al menos 10 dígitos, que cuenta sea alfanumérico, que fechas estén en formato YYYY-MM-DD, que kwh_total y total_pagar_mxn sean numéricos. Si algún campo no se encuentra, asigna null.\",\n  \"ejemplo_salida\": {\n    \"no_servicio\": \"219890418432\",\n    \"RMU\": \"72270 89-04-01 XAXX-010101 061 CFE\",\n    \"cuenta\": \"12DV08C011231540\",\n    \"tarifa\": \"01\",\n    \"no_medidor\": \"0B48J7\",\n    \"multiplicador\": \"1\",\n    \"no_hilos\": \"1\",\n    \"nombre\": \"FELIPE CARRANZA R\",\n    \"direccion\": \"42 NTE 2207 PROLG 22 PINO SUAREZ Y BLVD XONACA DIEZ DE MAYO 08JC.P.72270 PUEBLA,PUE.\",\n    \"direccion_formatted\": \"Calle 42 Nte 2207, Col. Pino Suárez y Blvd Xonaca, 72270 Puebla, Puebla, México\",\n    \"periodo_inicio\": \"2025-04-07\",\n    \"periodo_fin\": \"2025-06-06\",\n    \"kwh_total\": \"177\",\n    \"total_pagar_mxn\": \"242.00\"\n  },\n  \"formato_respuesta\": \"Devuelve ÚNICAMENTE el JSON con los datos extraídos, sin explicaciones, sin markdown, sin bloques de código.\"\n}",
        "schemaType": "fromJson",
        "jsonSchemaExample": "{\n  \"no_servicio\": \"219890418432\",\n  \"RMU\": \"72270 89-04-01 XAXX-010101 061 CFE\",\n  \"cuenta\": \"12DV08C011231540\",\n  \"tarifa\": \"01\",\n  \"no_medidor\": \"0B48J7\",\n  \"multiplicador\": \"1\",\n  \"no_hilos\": \"1\",\n  \"nombre\": \"FELIPE CARRANZA R\",\n  \"direccion\": \"42 NTE 2207 PROLG 22 PINO SUAREZ Y BLVD XONACA DIEZ DE MAYO 08JC.P.72270 PUEBLA,PUE.\",\n  \"direccion_formatted\": \"Calle 42 Nte 2207, Col. Pino Suárez y Blvd Xonaca, 72270 Puebla, Puebla, México\",\n  \"periodo_inicio\": \"2025-04-07\",\n  \"periodo_fin\": \"2025-06-06\",\n  \"kwh_total\": \"177\",\n  \"total_pagar_mxn\": \"242.00\"\n}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.informationExtractor",
      "typeVersion": 1.2,
      "position": [
        688,
        -176
      ],
      "id": "59e4679d-456b-4740-99f4-692cc7132d47",
      "name": "datos_recibo_frontal_cfe1"
    }
  ],
  "connections": {
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request2": {
      "main": [
        [
          {
            "node": "datos_recibo_posterior_cfe",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Posterior": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "datos_recibo_posterior_cfe": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Generate Cache Key": {
      "main": [
        [
          {
            "node": "Query Cache",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Query Cache": {
      "main": [
        [
          {
            "node": "Cache Exists?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cache Exists?": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Annual Solar",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save to Cache": {
      "main": [
        [
          {
            "node": "Merge Cache Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Cache Info": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "HTTP Request6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request6": {
      "main": [
        [
          {
            "node": "datos_recibo_frontal_cfe1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set": {
      "main": [
        [
          {
            "node": "Generate Cache Key",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Dirección a Pin1": {
      "main": [
        [
          {
            "node": "Set",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate Annual Irradiation1": {
      "main": [
        [
          {
            "node": "Save to Cache",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Cache Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Frontal": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Save Temp Quote",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Temp Quote": {
      "main": [
        [
          {
            "node": "Irradiación1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Ensure TempLeadId",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ensure TempLeadId": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Input": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Frontal",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Posterior",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Annual Solar": {
      "main": [
        [
          {
            "node": "Calculate Annual Irradiation1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "datos_recibo_posterior_cfe",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "datos_recibo_frontal_cfe1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "datos_recibo_frontal_cfe1": {
      "main": [
        [
          {
            "node": "Dirección a Pin1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "3dea49b7dd9b43976d38842c495efe40be7c7e03943c21cc3656ea0a8437e9d2"
  }
}